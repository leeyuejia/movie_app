{"version":3,"sources":["component/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","onSubmit","htmlFor","type","placeholder","React","Component","MovieInfo","this","props","movie","Title","Year","src","Poster","alt","Genre","Plot","App","state","baseURL","apikey","query","movieTitle","searchURL","handleSubmit","bind","handleChange","event","setState","target","id","value","preventDefault","a","fetch","response","json","result","console","log","Fragment","onChange","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sTAaeA,G,6KATP,OACI,0BAAMC,UAAQ,GACV,2BAAOC,QAAQ,QAAf,cACA,2BAAOC,KAAK,OAAOC,YAAY,sBAC/B,4BAAQD,KAAK,UAAb,e,GANGE,IAAMC,YCEnBC,E,uKAEF,OACE,6BACE,sCAAYC,KAAKC,MAAMC,MAAMC,OAC7B,qCAAWH,KAAKC,MAAMC,MAAME,MAC5B,yBAAKC,IAAKL,KAAKC,MAAMC,MAAMI,OAAQC,IAAKP,KAAKC,MAAMC,MAAMC,QACzD,sCAAYH,KAAKC,MAAMC,MAAMM,OAC7B,qCAAWR,KAAKC,MAAMC,MAAMO,W,GARZZ,IAAMC,WAsEfY,E,kDAvDb,WAAaT,GAAQ,IAAD,8BAChB,cAAMA,IACDU,MAAQ,CACXC,QAAS,2BACTC,OAAQ,kBACRC,MAAO,MACPC,WAAY,GACZC,UAAW,IAEb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVJ,E,yDAYJE,GACZpB,KAAKqB,SAAL,eAAiBD,EAAME,OAAOC,GAAKH,EAAME,OAAOE,U,mCAEpCJ,GAAQ,IAAD,OACnBA,EAAMK,iBACNzB,KAAKqB,SAAS,CACZL,UAAWhB,KAAKW,MAAMC,QAAUZ,KAAKW,MAAME,OAASb,KAAKW,MAAMG,MAASd,KAAKW,MAAMI,YADrF,sBAEG,8BAAAW,EAAA,+EAE4BC,MAAM,EAAKhB,MAAMK,WAF7C,cAEWY,EAFX,gBAG0BA,EAASC,OAHnC,OAGWC,EAHX,OAIKC,QAAQC,IAAIF,GACZ,EAAKT,SAAS,CAACnB,MAAO4B,IAL3B,kDAOKC,QAAQC,IAAR,MAPL,6D,+BAYL,OACA,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,0BAAMxC,SAAUO,KAAKiB,cACnB,2BAAOvB,QAAQ,cAAf,SACA,2BACE6B,GAAG,aACH5B,KAAK,OACL6B,MAAOxB,KAAKW,MAAMI,WAClBmB,SAAUlC,KAAKmB,eAEjB,2BACExB,KAAK,SACL6B,MAAM,qBAGV,uBAAGW,KAAMnC,KAAKW,MAAMK,WAAYhB,KAAKW,MAAMK,WACzChB,KAAKW,MAAMT,MAAS,kBAAC,EAAD,CAAWA,MAAOF,KAAKW,MAAMT,QAAW,Q,GAjDlDL,IAAMC,WCNJsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.42ede75f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Form extends React.Component {\r\n    render() {\r\n        return (\r\n            <form onSubmit>\r\n                <label htmlFor='name'>Movie Name</label>\r\n                <input type='text' placeholder='name of the movie'></input>\r\n                <button type='submit'>Search</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default Form;\r\n// class MovieInfo extends React.Component {\r\n//     render () {\r\n//       return  (\r\n//         <div>\r\n//           <h1>Title: {this.props.movie.Title}</h1>\r\n//           <h2>Year: {this.props.movie.Year}</h2>\r\n//           <img src={this.props.movie.Poster} alt={this.props.movie.Title}/>\r\n//           <h3>Genre: {this.props.movie.Genre}</h3>\r\n//           <h4>Plot: {this.props.movie.Plot}</h4>\r\n//         </div>\r\n//       )\r\n//     }\r\n//   }\r\n\r\n// class App extends React.Component {\r\n//     constructor (props) {\r\n//         super(props)\r\n//         this.state = {\r\n//           baseURL: 'http://www.omdbapi.com/?',\r\n//           apikey: 'apikey=' + '98e3fb1f',\r\n//           query: '&t=',\r\n//           movieTitle: '',\r\n//           searchURL: ''\r\n//         }\r\n//         this.handleSubmit = this.handleSubmit.bind(this)\r\n//         this.handleChange = this.handleChange.bind(this)\r\n//       }\r\n//       handleChange (event) {\r\n//         this.setState({ [event.target.id]: event.target.value })\r\n//       }\r\n//       handleSubmit (event) {\r\n//         event.preventDefault()\r\n//         this.setState({\r\n//           searchURL: this.state.baseURL + this.state.apikey + this.state.query +  this.state.movieTitle\r\n//         }, async() => {\r\n//             try {\r\n//                 const response = await fetch(this.state.searchURL);\r\n//                 const result = await response.json();\r\n//                 console.log(result)\r\n//                 this.setState({movie: result})\r\n//             } catch(err) {\r\n//                 console.log(err)\r\n//             }\r\n//         })\r\n//     }\r\n//     render () {\r\n//       return (\r\n//       <React.Fragment>\r\n//         <form onSubmit={this.handleSubmit}>\r\n//           <label htmlFor='movieTitle'>Title</label>\r\n//           <input\r\n//             id='movieTitle'\r\n//             type='text'\r\n//             value={this.state.movieTitle}\r\n//             onChange={this.handleChange}\r\n//           />\r\n//           <input\r\n//             type='submit'\r\n//             value='Find Movie Info'\r\n//           />\r\n//         </form>\r\n//         <a href={this.state.searchURL}>{this.state.searchURL}</a>\r\n//         {(this.state.movie) ? <MovieInfo movie={this.state.movie}/> : ''}\r\n//       </React.Fragment>\r\n//     )\r\n//     }\r\n//   }","import React from 'react';\r\nimport './App.css';\r\nimport Form from './component/Form.js'\r\n\r\nclass MovieInfo extends React.Component {\r\n  render () {\r\n    return  (\r\n      <div>\r\n        <h1>Title: {this.props.movie.Title}</h1>\r\n        <h2>Year: {this.props.movie.Year}</h2>\r\n        <img src={this.props.movie.Poster} alt={this.props.movie.Title}/>\r\n        <h3>Genre: {this.props.movie.Genre}</h3>\r\n        <h4>Plot: {this.props.movie.Plot}</h4>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor (props) {\r\n      super(props)\r\n      this.state = {\r\n        baseURL: 'http://www.omdbapi.com/?',\r\n        apikey: 'apikey=' + '98e3fb1f',\r\n        query: '&t=',\r\n        movieTitle: '',\r\n        searchURL: ''\r\n      }\r\n      this.handleSubmit = this.handleSubmit.bind(this)\r\n      this.handleChange = this.handleChange.bind(this)\r\n    }\r\n    handleChange (event) {\r\n      this.setState({ [event.target.id]: event.target.value })\r\n    }\r\n    handleSubmit (event) {\r\n      event.preventDefault()\r\n      this.setState({\r\n        searchURL: this.state.baseURL + this.state.apikey + this.state.query +  this.state.movieTitle\r\n      }, async() => {\r\n          try {\r\n              const response = await fetch(this.state.searchURL);\r\n              const result = await response.json();\r\n              console.log(result)\r\n              this.setState({movie: result})\r\n          } catch(err) {\r\n              console.log(err)\r\n          }\r\n      })\r\n  }\r\n  render () {\r\n    return (\r\n    <React.Fragment>\r\n      <Form/>\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label htmlFor='movieTitle'>Title</label>\r\n        <input\r\n          id='movieTitle'\r\n          type='text'\r\n          value={this.state.movieTitle}\r\n          onChange={this.handleChange}\r\n        />\r\n        <input\r\n          type='submit'\r\n          value='Find Movie Info'\r\n        />\r\n      </form>\r\n      <a href={this.state.searchURL}>{this.state.searchURL}</a>\r\n      {(this.state.movie) ? <MovieInfo movie={this.state.movie}/> : ''}\r\n    </React.Fragment>\r\n  )\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}